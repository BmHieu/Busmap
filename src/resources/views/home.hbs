<div class="homeapp">
    <div class="joyrney-scrollbar-home">
        <div class="scrollbar">
            {{#each journeys}}
            <div class="card mb-3" style="max-width: 400px;">
                <a class="card-link-home" href="/journeys/{{this.slug}}">
                    <div class="row g-0">
                        <div class="col-md-12">
                            <div class="card-body">
                                <h5 class="card-title" id="line{{sum @index 1}}" value="{{this.paths}}">{{this.name}}
                                </h5>
                                <p class="card-text">{{this.first_last}}</p>
                                <p class="card-text"><small class="text-muted">Th·ªùi gian: {{this.time}}</small></p>
                            </div>
                        </div>
                    </div>
                </a>
            </div>
            {{/each}}
        </div>
    </div>
    <div style="width:70%; height:90%" id="viewDiv"
        class="esri-view esri-view-height-xsmall esri-view-height-less-than-small esri-view-height-less-than-medium esri-view-height-less-than-large esri-view-height-less-than-xlarge esri-view-orientation-landscape esri-view-width-xsmall esri-view-width-less-than-small esri-view-width-less-than-medium esri-view-width-less-than-large esri-view-width-less-than-xlarge">
        <div class="esri-view-root">
            <div class="esri-view-surface esri-view-surface--touch-none" role="application" tabindex="0">
                <canvas style="width: 478px; height: 450px; display: block;" width="478" height="450">
                </canvas>
            </div>
            <div class="esri-overlay-surface">
                <div style="visibility: hidden;">

                </div>
            </div>
            <div class="esri-ui" style="inset: 0px;">
                <div class="esri-ui-inner-container esri-ui-corner-container" style="inset: 15px 15px 30px;">
                    <div class="esri-ui-top-left esri-ui-corner">
                        <div class="esri-component esri-zoom esri-widget">
                            <div class="esri-widget--button esri-widget esri-interactive" role="button" tabindex="0"
                                title="Zoom in">
                                <span aria-hidden="true" role="presentation" class="esri-icon esri-icon-plus"></span>
                                <span class="esri-icon-font-fallback-text">Zoom in</span>
                            </div>
                            <div class="esri-widget--button esri-widget esri-interactive" role="button" tabindex="0"
                                title="Zoom out">
                                <span aria-hidden="true" role="presentation" class="esri-icon esri-icon-minus">

                                </span>
                                <span class="esri-icon-font-fallback-text">Zoom out</span>
                            </div>
                        </div>
                    </div>
                    <div class="esri-ui-top-right esri-ui-corner"></div>
                    <div class="esri-ui-bottom-left esri-ui-corner"></div>
                    <div class="esri-ui-bottom-right esri-ui-corner"></div>
                </div>
                <div class="esri-ui-inner-container esri-ui-manual-container">
                    <div class="esri-component esri-attribution esri-widget">
                        <div class="esri-attribution__sources esri-interactive" tabindex="0" role="button">Esri, NASA,
                            NGA, USGS | Esri Community Maps Contributors, Esri, HERE, Garmin, METI/NASA, USGS</div>
                        <div class="esri-attribution__powered-by">Powered by <a
                                class="esri-attribution__link esri-widget__anchor" href="http://www.esri.com/"
                                target="_blank" rel="noreferrer">Esri</a></div>
                    </div>
                    <div class="esri-component esri-popup" role="presentation"></div>
                    <div class="esri-component esri-spinner"></div>
                </div>
            </div>
        </div>
        <div class="esri-view-user-storage"></div>
    </div>
</div>

<div name="virtual-list-point">
    {{#each points}}
    <div name="virtual-point" id="VirtualPoint">
        <div id="PointName{{sum @index 1}}" value="{{this.name}}"></div>
        <div id="PointLatitude{{sum @index 1}}" value="{{this.latitude}}"></div>
        <div id="PointLongitude{{sum @index 1}}" value="{{this.longitude}}"></div>
        <div id="PointRoutes{{sum @index 1}}" value="{{this.routes}}"></div>
    </div>
    {{/each}}
</div>

<script>

    require(["esri/config",
        "esri/Map",
        "esri/views/MapView",
        "esri/widgets/Locate",
        "esri/widgets/Track",
        "esri/rest/locator",
        "esri/Graphic",
        "esri/layers/GraphicsLayer",
        "esri/widgets/Search",
    ], (esriConfig, Map, MapView, Locate, Track, locator, Graphic, GraphicsLayer, Search) => {

        esriConfig.apiKey = "AAPK25279516f4f14bf281c511fe3e4b20edEO2GLVxxSx1dDem5g2aaJQQk_5jFEG9c8zmv0A7erp-lqgrvwHFUg66l8EQiQj-X";

        //////////////////////// Solve Paths ////////////////////////////////////////
        let indexOfLine = 1;
        var ArrayPaths = [];

        while (document.getElementById("line" + indexOfLine) != null) {
            var getdataPath = document.getElementById("line" + indexOfLine).getAttribute("value");

            const _Regex = /[\[\] ,\n]+/g;
            var _DataArraySplitedCharacters = getdataPath.split(_Regex);

            if (_DataArraySplitedCharacters.length >= 2) {
                var _DataArrayConverted = [];
                for (let j = 0; j < _DataArraySplitedCharacters.length; j++) {
                    var _ArrayTemp = [];
                    if (_DataArraySplitedCharacters[j] != []) {
                        _ArrayTemp.push(_DataArraySplitedCharacters[j]);
                        j++;
                        _ArrayTemp.push(_DataArraySplitedCharacters[j]);
                        _DataArrayConverted.push(_ArrayTemp);
                    }
                }
                ArrayPaths.push(_DataArrayConverted);
            }
            indexOfLine++;
        }
        ///////////////////////////////////////////////////////////////

        /////////// init viewmap /////////////////
        const map = new Map({
            basemap: "arcgis-navigation"
        });

        const view = new MapView({
            container: "viewDiv",
            map: map,
            zoom: 11,
            center: [106.75, 10.83]
        });
        //////////////// add getlocate  ////////////////
        
        

        const graphicsLayer = new GraphicsLayer();
        map.add(graphicsLayer);

        /*
        const lineSymbol = {
            type: "simple-line",
            color: [91, 79, 227],
            width: 4
        };

        const polyline = {
            type: "polyline",
            paths: [],
        };

        var polylineGraphic = new Graphic({
            geometry: polyline,
            symbol: lineSymbol
        });
        ////////////////////////////////

        ///////////////  add Line graphicsLayer  /////////////////
        for (let index = 0; index < ArrayPaths.length; index++) {
            polyline.paths = [ArrayPaths[index]];
            polylineGraphic = new Graphic({
                geometry: polyline,
                symbol: lineSymbol
            });
            graphicsLayer.add(polylineGraphic);
        }*/
        /////////////////////////////////////////////////////



        var point_template = {
            "title": "{PlaceName}",
            "content": "<b>{Place_addr}</b>."
        };

        var point_bus_template = {
            "type": "picture-marker",
            "url": "https://i.imgur.com/oCcNTGY.png",
            "width": "30px",
            "height": "30px"
        };


        const locatorUrl = "http://geocode-api.arcgis.com/arcgis/rest/services/World/GeocodeServer";
        function findPlaces(category, pt) {
            locator.addressToLocations(locatorUrl, {
                location: pt,
                categories: [category],
                maxLocations: 25,
                outFields: ["Place_addr", "PlaceName"]
            })

                .then(function (results) {
                    view.popup.close();
                    view.graphics.removeAll();

                    results.forEach(function (result) {
                        view.graphics.add(
                            new Graphic({
                                attributes: result.attributes,  // Data attributes returned
                                geometry: result.location, // Point returned
                                symbol: point_bus_template,
                                popupTemplate: point_template
                            }));
                    });

                });

        }

        // Search for places in center of map
        view.watch("stationary", function (val) {
            if (val) {
                findPlaces("Bus station", view.center);
            }
        });


        /*///Load all point
        let indexOfPoint = 1;
        while (document.getElementById("PointName" + indexOfPoint) != null) {
            let getPointName = document.getElementById("PointName" + indexOfPoint).getAttribute("value");
            let getPointLatitude = document.getElementById("PointLatitude" + indexOfPoint).getAttribute("value");
            let getPointLongitude = document.getElementById("PointLongitude" + indexOfPoint).getAttribute("value");
            let getPointRoutes = document.getElementById("PointRoutes" + indexOfPoint).getAttribute("value");

            let point = new Graphic({
                symbol: point_bus_template,
                geometry: {
                    type: "point",
                    latitude: getPointLatitude,
                    longitude: getPointLongitude,
                },
                attributes: {
                    Name: getPointName,
                    Routes: getPointRoutes
                },
                popupTemplate: point_template
            })
            view.graphics.add(point);
            indexOfPoint++;
        }*/
        /*
        const locate = new Locate({
          view: view,
          useHeadingEnabled: false,
          goToOverride: function (view, options) {
            options.target.scale = 1500;
            return view.goTo(options.target);
          }
        });
        view.ui.add(locate, "top-left");*/

        //////////////// add tracking  ////////////////
        const track = new Track({
            view: view,
            graphic: new Graphic({
                symbol: {
                    type: "simple-marker",
                    size: "12px",
                    color: "green",
                    outline: {
                        color: "#efefef",
                        width: "1.5px"
                    }
                }
            }),
            useHeadingEnabled: false
        });
        view.ui.add(track, "top-left");

        const search = new Search({
            //Add Search widget
            view: view
        });

        view.ui.add(search, "top-right");
    });
</script>