<div class="container">
    <h3 style="color: black; font-weight:bold; font-size: 30px;">Tạo trạm dừng mới</h3>
    <form method="POST" action="/points/store">
        <div class="mainform">
            <div class="forminfor">
                <div class="form-group">
                    <label for="name">Tên trạm</label>
                    <input type="text" class="form-control" id="name" name="name">
                </div>
                <div class="form-group">
                    <label for="name">Tuyến chính</label>
                    <select type="text" class="form-control" id="journeyslug" name="journeyslug">
                        <option value="-1">Chọn 1 tuyến xe đã được tạo</option>
                        {{#each journeys}}
                        <option value="{{this.slug}}">{{this.name}}</option>
                        {{/each}}
                    </select>
                </div>
                <div class="form-group">
                    <label for="name">Tất cả các tuyến sẽ đi qua</label>
                    <input type="text" class="form-control" id="routes" name="routes">
                </div>
                <div class="form-group">
                    <label for="name">Vĩ độ (Latitude - Click vào bản đồ để lấy điểm vẽ)</label>
                    <textarea type="text" class="form-control" id="latitude" name="latitude"></textarea>
                </div>
                <div class="form-group">
                    <label for="name">Kinh độ (longitude -Click vào bản đồ để lấy điểm vẽ)</label>
                    <textarea type="text" class="form-control" id="longitude" name="longitude"></textarea>
                </div>

                <div class="containerbutton">
                    <button type="submit" class="btn btn-primary" style="background: #87CEFA; font-size: 16px; font-weight: bold;border: 1px solid #87CEFA;">Tạo trạm dừng</button>
                    <button type="button" class="btn btn-danger" id="BtnRemovePoint" style="font-size: 16px; font-weight: bold;">Xóa điểm vẽ</button>
                </div>
            </div>
            <div style="width:60%; height: 600px" id="viewDiv"
                class="esri-view esri-view-height-xsmall esri-view-height-less-than-small esri-view-height-less-than-medium esri-view-height-less-than-large esri-view-height-less-than-xlarge esri-view-orientation-landscape esri-view-width-xsmall esri-view-width-less-than-small esri-view-width-less-than-medium esri-view-width-less-than-large esri-view-width-less-than-xlarge">
                <div class="esri-view-root">
                    <div class="esri-view-surface esri-view-surface--touch-none" role="application" tabindex="0">
                        <canvas style="width: 478px; height: 450px; display: block;" width="478" height="450">
                        </canvas>
                    </div>
                    <div class="esri-overlay-surface">
                        <div style="visibility: hidden;"> </div>
                    </div>
                    <div class="esri-ui" style="inset: 0px;">
                        <div class="esri-ui-inner-container esri-ui-corner-container" style="inset: 15px 15px 30px;">
                            <div class="esri-ui-top-left esri-ui-corner">
                                <div class="esri-component esri-zoom esri-widget">
                                    <div class="esri-widget--button esri-widget esri-interactive" role="button"
                                        tabindex="0" title="Zoom in">
                                        <span aria-hidden="true" role="presentation"
                                            class="esri-icon esri-icon-plus"></span>
                                        <span class="esri-icon-font-fallback-text">Zoom in</span>
                                    </div>
                                    <div class="esri-widget--button esri-widget esri-interactive" role="button"
                                        tabindex="0" title="Zoom out">
                                        <span aria-hidden="true" role="presentation" class="esri-icon esri-icon-minus">

                                        </span>
                                        <span class="esri-icon-font-fallback-text">Zoom out</span>
                                    </div>
                                </div>
                            </div>
                            <div class="esri-ui-top-right esri-ui-corner"></div>
                            <div class="esri-ui-bottom-left esri-ui-corner"></div>
                            <div class="esri-ui-bottom-right esri-ui-corner"></div>
                        </div>
                        <div class="esri-ui-inner-container esri-ui-manual-container">
                            <div class="esri-component esri-attribution esri-widget">
                                <div class="esri-attribution__sources esri-interactive" tabindex="0" role="button">Esri,
                                    NASA,
                                    NGA, USGS | Esri Community Maps Contributors, Esri, HERE, Garmin, METI/NASA, USGS
                                </div>
                                <div class="esri-attribution__powered-by">Powered by <a
                                        class="esri-attribution__link esri-widget__anchor" href="http://www.esri.com/"
                                        target="_blank" rel="noreferrer">Esri</a></div>
                            </div>
                            <div class="esri-component esri-popup" role="presentation"></div>
                            <div class="esri-component esri-spinner"></div>
                        </div>
                    </div>
                </div>
                <div class="esri-view-user-storage"></div>
            </div>
        </div>
    </form>
</div>

<div name="virtualJourney" style="visibility: hidden">
    {{#each journeys}}
    <div id="JourneyName{{sum @index 1}}" value="{{this.name}}"></div>
    <div id="JourneyPaths{{sum @index 1}}" value="{{this.paths}}"></div>
    <div id="JourneySlug{{sum @index 1}}" value="{{this.slug}}"></div>
    {{/each}}
</div>
<script>
    require([
        "esri/config",
        "esri/Map",
        "esri/views/MapView",
        "esri/rest/locator",
        "esri/widgets/Track",
        "esri/Graphic",
        "esri/layers/GraphicsLayer",
        "esri/widgets/Search"
    ], (esriConfig, Map, MapView, locator, Track, Graphic, GraphicsLayer, Search) => {

        esriConfig.apiKey = "AAPK1abceff074ac40efb53ec5b42a3eabf7h9BXaNUytC9SkeUdeDI6fVD4r_h2Hd5ZBwmtkd9B3AGk50DISEoXs4iYLxGCiVP8";

        var latitudePoint = document.getElementById("latitude");
        var longitudePoint = document.getElementById("longitude");
        var btnRemovePoint = document.getElementById("BtnRemovePoint");
        var journeySlugSelector = document.getElementById("journeyslug");

        let indexOfLine = 1;
        var ArrayJourneys = [];

        while (document.getElementById("JourneyPaths" + indexOfLine) != null) {
            var getdataPath = document.getElementById("JourneyPaths" + indexOfLine).getAttribute("value");
            var journeyName = document.getElementById("JourneyName" + indexOfLine).getAttribute("value");
            var journeySlug = document.getElementById("JourneySlug" + indexOfLine).getAttribute("value");

            const _Regex = /[\[\] ,\n]+/g;
            var _DataArraySplitedCharacters = getdataPath.split(_Regex);

            if (_DataArraySplitedCharacters.length >= 2) {
                var _DataArrayConverted = [];
                for (let j = 0; j < _DataArraySplitedCharacters.length; j++) {
                    var _ArrayTemp = [];
                    if (_DataArraySplitedCharacters[j] != []) {
                        _ArrayTemp.push(_DataArraySplitedCharacters[j]);
                        j++;
                        _ArrayTemp.push(_DataArraySplitedCharacters[j]);
                        _DataArrayConverted.push(_ArrayTemp);
                    }
                }
                ArrayJourneys.push({
                    name: journeyName,
                    slug: journeySlug,
                    paths: _DataArrayConverted
                })
            }
            indexOfLine++;
        }

        const map = new Map({
            basemap: "arcgis-navigation" // Basemap layer
        });

        const view = new MapView({
            map: map,
            center: [106.75, 10.83],
            zoom: 11,
            container: "viewDiv"
        });

        const graphicsLayer = new GraphicsLayer();
        const pointLayer = new GraphicsLayer();
        map.add(graphicsLayer);
        map.add(pointLayer);

        const simpleMarkerSymbol = {
            type: "simple-marker",
            color: [226, 119, 40],  // Orange
            outline: {
                color: [255, 255, 255], // White
                width: 1
            }
        }

        view.on("click", function (event) {
            view.hitTest(event).then(function (hitTestResults) { // Search for features where the user clicked
                if (hitTestResults.results) {
                    let xlongitude = event.mapPoint.longitude;
                    let ylatitude = event.mapPoint.latitude;
                    latitudePoint.innerHTML = ylatitude;
                    longitudePoint.innerHTML = xlongitude;
                    console.log(latitudePoint)
                    pointLayer.removeAll();
                    pointLayer.add(new Graphic({ // Data attributes returned
                        geometry: {
                            type: "point",
                            longitude: xlongitude,
                            latitude: ylatitude
                        }, // Point returned
                        symbol: simpleMarkerSymbol
                    }));
                }
            });
        });

        btnRemovePoint.addEventListener("click", function () {
            latitudePoint.innerHTML = "";
            longitudePoint.innerHTML = "";
            pointLayer.removeAll();
        })

        const lineSymbol = {
            type: "simple-line",
            color: [91, 79, 227],//violet
            width: 6,
            outline: {
                color: [255, 255, 255], // White
                width: 1
            }
        };

        var polyline = {
            type: "polyline",
            paths: [],
        };

        var polylineGraphic = new Graphic({
            geometry: polyline,
            symbol: lineSymbol
        })

        journeySlugSelector.addEventListener("change", function (event) {
            if (event.target.value != -1) {
                graphicsLayer.remove(polylineGraphic);
                for (let index = 0; index < ArrayJourneys.length; index++) {
                    if (ArrayJourneys[index].slug == event.target.value) {
                        polyline.paths = ArrayJourneys[index].paths;
                        polylineGraphic = new Graphic({
                            geometry: polyline,
                            symbol: lineSymbol
                        })
                        graphicsLayer.add(polylineGraphic);
                    }
                }
            }
        });
    });
</script>